buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    // dependencies {
    //     classpath 'com.guardsquare:proguard-gradle:7.2.0-beta2'
    // }
}

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.4.3"
    // id "jacoco"
}

// these four lines are for development builds
// https://github.com/wpilibsuite/allwpilib/blob/main/DevelopmentBuilds.md
wpi.maven.useLocal = false
wpi.maven.useDevelopment = true
wpi.versions.wpilibVersion = '2023.+'
wpi.versions.wpimathVersion = '2023.+'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "org.team100.frc2023.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {          
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {

                    // "Other" means no gc args at all
                    // gcType = edu.wpi.first.gradlerio.deploy.roborio.GarbageCollectorType.Other

                    // give unused heap back to the kernel
                    // on full gc.  does full gc actually happen?
                    // jvmArgs.add("-XX:MaxHeapFreeRatio=70")
                    // 128M is too big, can't malloc it
                    // 100M is too small, fails with bad_alloc
                    // jvmArgs.add("-Xmx100M")
                    // jvmArgs.add("-Xms100M")

                    // serial gc is shorter pauses, less throughput
                    // we don't make much garbage so it might be better?
                    // jvmArgs.add("-XX:+UseSerialGC")
                    // small eden, gc often.  can't really make it
                    // less than this or jvm can't start.
                    // but if it's too small, then doomed objects get
                    // promoted and then the full gc's happen more
                    // often and take longer
                    // jvmArgs.add("-XX:NewSize=1M")
                    // jvmArgs.add("-XX:MaxNewSize=1M")

                    // "info" is less verbose than "debug"
                    // jvmArgs.add("-Xlog:gc*=info,heap*=info:file=/tmp/jvm.log")
                    // jvmArgs.add("-Xlog:gc*=debug,heap*=debug:file=/tmp/jvm.log")
                   
                    // these are the default wpi gc args
                    // jvmArgs.add("-XX:+UseG1GC")/
                    // try not to pause for long each time
                    // jvmArgs.add("-XX:MaxGCPauseMillis=1")
                    // devote as much *total* time as you want
                    // jvmArgs.add("-XX:GCTimeRatio=1")

                    // turn off compilation
                    // jvmArgs.add("-Djava.compiler=NONE")

                    // compile everything at the start
                    //jvmArgs.add("-Xcomp")
                    //jvmArgs.add("-Xbatch")

                    // "pretouch" means actually committing heap
                    // with kernel overcommit we definitely don't want this
                    jvmArgs.remove("-XX:+AlwaysPreTouch")

                    // manual heap space size
                    // jvmArgs.add("-XX:InitialRAMPercentage=30")
                    // jvmArgs.add("-XX:MinRAMPercentage=30")
                    // jvmArgs.add("-XX:MaxRAMPercentage=10")

                    // print heap space stats at startup
                    jvmArgs.add("-XshowSettings:vm")

                    // these make it possible to connect JConsole
                    // jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.port=1099")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    // jvmArgs.add("-Djava.rmi.server.hostname=172.22.11.2")

                    // these are for native memory tracking
                    // jvmArgs.add("-XX:NativeMemoryTracking=detail")
                    // jvmArgs.add("-XX:+UnlockDiagnosticVMOptions")
                    // jvmArgs.add("-XX:+PrintNMTStatistics")

                    // this is so we can see what's taking heap space
                    //jvmArgs.add("-XX:+HeapDumpOnOutOfMemoryError")
                    //jvmArgs.add("-XX:HeapDumpPath=/tmp/heap.hprof")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
                // kernel parameters
                etcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/etc')
                    directory = '/etc'
                }
                // reload the kernel parameters we just changed
                reloadSysctl(getArtifactTypeClass('CommandArtifact')) {
                    command = 'sysctl -p'
                }
                killKillKill(getArtifactTypeClass('CommandArtifact')) {
                    command = 'start-stop-daemon --stop --signal KILL --name java'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {

    implementation 'org.msgpack:jackson-dataformat-msgpack:0.9.3'
    
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    // 254 uses jama
    implementation 'gov.nist.math:jama:1.0.3'

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    // to run 254's tests which are junit 4
    // testImplementation("junit:junit:4.13.2")
    // testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.2'
    // to run some of 254's tests using junit5
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    implementation "org.ejml:ejml-simple:0.42"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    // finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

// jacocoTestReport {
//     dependsOn test
// }

// jacocoTestCoverageVerification {
//     violationRules {
//         rule {
//             limit {
//                 minimum = 0.04
//             }
//         }
//     }
// }

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// arg. comment out the proguard stuff until it actually works.

// task proguard(type: proguard.gradle.ProGuardTask) {
//     configuration 'proguard.txt'
// }

// task proguardshrink(type: proguard.gradle.ProGuardTask) {
//     configuration 'proguard-shrink.txt'
// }

// //jar.finalizedBy proguard
// jar.finalizedBy proguardshrink

// //jar.finalizedBy proguard
// jar.finalizedBy proguardshrink

// task copyJar(type: Copy) {
//     from "$buildDir/libs/swerve100.jar"
//     into "$buildDir/libs/"
//     rename('swerve100.jar', 'swerve100_big.jar')
// }
// task overwriteJar(type: Copy) {
//     from "$buildDir/libs/swerve100_out.jar"
//     into "$buildDir/libs/"
//     rename('swerve100_out.jar', 'swerve100.jar')
// }
// // proguardshrink.finalizedBy overwriteJar
// proguardshrink.finalizedBy copyJar
// copyJar.finalizedBy overwriteJar
// copyJar.finalizedBy overwriteJar
